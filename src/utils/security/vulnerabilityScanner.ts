
/**
 * Scan for common security vulnerabilities
 */
export function scanForVulnerabilities(): {
  issues: Array<{
    id: string;
    type: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    description: string;
    recommendation: string;
  }>;
  score: number;
} {
  const issues = [];
  
  // Check for insecure localStorage usage
  if (checkInsecureLocalStorage()) {
    issues.push({
      id: 'INSECURE_STORAGE',
      type: 'insecure_storage',
      severity: 'high',
      description: 'Sensitive data stored in localStorage without encryption',
      recommendation: 'Use secure storage or encrypting sensitive data before storing'
    });
  }
  
  // Check for missing CSP headers
  if (checkMissingCSP()) {
    issues.push({
      id: 'MISSING_CSP',
      type: 'missing_csp',
      severity: 'medium',
      description: 'Content Security Policy headers not found',
      recommendation: 'Configure CSP headers to prevent XSS attacks'
    });
  }
  
  // Check for vulnerable dependencies (simulated)
  if (Math.random() > 0.7) {
    issues.push({
      id: 'VULNERABLE_DEPENDENCY',
      type: 'vulnerable_dependency',
      severity: 'high',
      description: 'Vulnerable dependency detected in application',
      recommendation: 'Update dependencies to the latest secure versions'
    });
  }
  
  // Calculate security score (0-100)
  const criticalCount = issues.filter(i => i.severity === 'critical').length * 25;
  const highCount = issues.filter(i => i.severity === 'high').length * 15;
  const mediumCount = issues.filter(i => i.severity === 'medium').length * 5;
  const lowCount = issues.filter(i => i.severity === 'low').length * 2;
  
  const score = Math.max(0, 100 - criticalCount - highCount - mediumCount - lowCount);
  
  return {
    issues,
    score
  };
}

/**
 * Check for insecure localStorage usage
 */
function checkInsecureLocalStorage(): boolean {
  try {
    // Look for potentially sensitive keys in localStorage
    const sensitiveKeys = ['password', 'token', 'secret', 'key', 'auth', 'credentials'];
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (!key) continue;
      
      // Check if this key might contain sensitive data
      if (sensitiveKeys.some(term => key.toLowerCase().includes(term))) {
        // Look at the value to see if it's not encrypted/encoded
        const value = localStorage.getItem(key) || '';
        
        // If it looks like plain text or JSON, it's probably insecure
        if (!value.match(/^[a-zA-Z0-9+/=_-]+$/)) {
          return true;
        }
        
        // If it looks like JSON, it might be insecure
        try {
          const parsed = JSON.parse(value);
          // If we can parse it and it has data properties, it's likely insecure
          if (typeof parsed === 'object' && parsed !== null) {
            return true;
          }
        } catch {
          // Not JSON, ignore
        }
      }
    }
    
    return false;
  } catch (error) {
    console.error('Error during localStorage security check:', error);
    return false;
  }
}

/**
 * Check for missing Content Security Policy
 */
function checkMissingCSP(): boolean {
  try {
    if (typeof document === 'undefined') return false;
    
    // Get CSP meta tag
    const cspMeta = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    
    if (!cspMeta) {
      // No CSP meta tag found, now check if there might be a header
      // We can't directly check headers, but we can make an educated guess
      
      // In a real app, you'd make a request to a known endpoint and check
      // the CSP header in the response, but we'll simulate it here
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Error during CSP check:', error);
    return false;
  }
}
