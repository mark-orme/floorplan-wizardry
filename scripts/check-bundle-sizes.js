
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// Bundle size limits in KB
const BUNDLE_SIZE_LIMITS = {
  main: 400,       // Main bundle
  vendor: 800,     // Vendor chunks
  total: 2000,     // Total bundle size
  assets: 750      // Images, fonts, etc.
};

// Path to the stats file generated by the visualizer
const statsPath = path.join(__dirname, '../dist/stats.html');

// Extract sizes from the stats HTML file using regex
function extractSizesFromStats() {
  try {
    if (!fs.existsSync(statsPath)) {
      console.error(chalk.red('Stats file not found. Make sure to run the build with visualizer enabled.'));
      return null;
    }

    const statsContent = fs.readFileSync(statsPath, 'utf8');
    
    // Extract the total bundle size
    const totalSizeMatch = statsContent.match(/Total Size: ([0-9.]+) KB/);
    const totalSize = totalSizeMatch ? parseFloat(totalSizeMatch[1]) : 0;
    
    // Extract individual chunk sizes
    const sizeRegex = /<span class="name">([^<]+)<\/span>[\s\S]*?<span class="size">([0-9.]+) KB<\/span>/g;
    const sizes = {};
    let match;
    
    while ((match = sizeRegex.exec(statsContent)) !== null) {
      const name = match[1];
      const size = parseFloat(match[2]);
      sizes[name] = size;
    }
    
    return {
      total: totalSize,
      chunks: sizes,
    };
  } catch (error) {
    console.error(chalk.red('Error extracting sizes from stats file:'), error);
    return null;
  }
}

// Check if sizes exceed limits
function checkSizeLimits(sizes) {
  if (!sizes) return false;
  
  let passesLimits = true;
  console.log(chalk.bold('Checking bundle size limits:'));
  
  // Check total size
  console.log(`Total bundle size: ${chalk.cyan(sizes.total.toFixed(2) + ' KB')} / ${BUNDLE_SIZE_LIMITS.total} KB`);
  if (sizes.total > BUNDLE_SIZE_LIMITS.total) {
    console.log(chalk.red(`‚ùå Total bundle exceeds limit by ${(sizes.total - BUNDLE_SIZE_LIMITS.total).toFixed(2)} KB`));
    passesLimits = false;
  } else {
    console.log(chalk.green('‚úÖ Total bundle size within limit'));
  }
  
  // Check main bundle
  const mainBundle = Object.keys(sizes.chunks).find(name => name.startsWith('main') || name === 'app');
  if (mainBundle && sizes.chunks[mainBundle] > BUNDLE_SIZE_LIMITS.main) {
    console.log(`Main bundle: ${chalk.cyan(sizes.chunks[mainBundle].toFixed(2) + ' KB')} / ${BUNDLE_SIZE_LIMITS.main} KB`);
    console.log(chalk.red(`‚ùå Main bundle exceeds limit by ${(sizes.chunks[mainBundle] - BUNDLE_SIZE_LIMITS.main).toFixed(2)} KB`));
    passesLimits = false;
  } else if (mainBundle) {
    console.log(`Main bundle: ${chalk.cyan(sizes.chunks[mainBundle].toFixed(2) + ' KB')} / ${BUNDLE_SIZE_LIMITS.main} KB`);
    console.log(chalk.green('‚úÖ Main bundle size within limit'));
  }
  
  // Check vendor bundles
  const vendorBundles = Object.keys(sizes.chunks).filter(name => name.startsWith('vendor') || name.includes('node_modules'));
  const totalVendorSize = vendorBundles.reduce((total, name) => total + sizes.chunks[name], 0);
  
  console.log(`Vendor bundles: ${chalk.cyan(totalVendorSize.toFixed(2) + ' KB')} / ${BUNDLE_SIZE_LIMITS.vendor} KB`);
  if (totalVendorSize > BUNDLE_SIZE_LIMITS.vendor) {
    console.log(chalk.red(`‚ùå Vendor bundles exceed limit by ${(totalVendorSize - BUNDLE_SIZE_LIMITS.vendor).toFixed(2)} KB`));
    passesLimits = false;
  } else {
    console.log(chalk.green('‚úÖ Vendor bundle size within limit'));
  }
  
  return passesLimits;
}

// Main function
function main() {
  console.log(chalk.bold.blue('üîç Checking bundle sizes...'));
  
  const sizes = extractSizesFromStats();
  if (!sizes) {
    process.exit(1);
  }
  
  const passesLimits = checkSizeLimits(sizes);
  
  if (!passesLimits) {
    console.log(chalk.red.bold('‚ùå Bundle size check failed. Please optimize your bundles.'));
    console.log(chalk.yellow('Tips for optimization:'));
    console.log('  - Use code splitting for routes and large components');
    console.log('  - Check for duplicate dependencies');
    console.log('  - Consider lazy loading non-critical components');
    console.log('  - Review and remove unused imports and dependencies');
    process.exit(1);
  }
  
  console.log(chalk.green.bold('‚úÖ All bundle sizes are within limits!'));
}

main();
