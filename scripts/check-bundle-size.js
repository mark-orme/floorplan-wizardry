
#!/usr/bin/env node
/**
 * Script to check bundle size limits
 * Parses the stats.html generated by rollup-plugin-visualizer
 * and fails the build if bundles exceed size budgets
 */

const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');

// Define size budgets in KB
const SIZE_BUDGETS = {
  'vendor-react': 180, // React and React DOM
  'vendor-ui': 150,    // UI components
  'vendor-utils': 250, // Fabric.js and utilities
  'vendor': 300,       // Other dependencies
  'components': 100,   // App components
  'hooks': 50,         // App hooks
  'utils': 80,         // App utilities
  'index': 20,         // Entry point
  'total': 800         // Total bundle size
};

// Helper to convert bytes to KB
function bytesToKB(bytes) {
  return Math.round(bytes / 1024);
}

async function main() {
  try {
    // Read the stats.html file
    const statsPath = path.join(process.cwd(), 'stats.html');
    if (!fs.existsSync(statsPath)) {
      console.error('Error: stats.html file not found. Make sure the build ran with the visualizer plugin.');
      process.exit(1);
    }
    
    const htmlContent = fs.readFileSync(statsPath, 'utf-8');
    
    // Parse the HTML
    const dom = new JSDOM(htmlContent);
    const document = dom.window.document;
    
    // Extract bundle data from the visualizer output
    const bundleData = {};
    let totalSize = 0;
    
    // Look for the bundle size data in the script tag
    const scripts = document.querySelectorAll('script');
    let dataScript;
    
    for (const script of scripts) {
      if (script.textContent.includes('window.__DATA__')) {
        dataScript = script;
        break;
      }
    }
    
    if (!dataScript) {
      console.error('Error: Could not find bundle data in stats.html');
      process.exit(1);
    }
    
    // Extract data
    const dataMatch = dataScript.textContent.match(/window\.__DATA__\s*=\s*(\{.+\})/s);
    if (!dataMatch) {
      console.error('Error: Could not parse bundle data from stats.html');
      process.exit(1);
    }
    
    // Parse the JSON data
    const bundleStats = JSON.parse(dataMatch[1]);
    
    // Process the bundle stats
    let totalBundleSize = 0;
    let violations = [];
    
    // Check each bundle group
    for (const bundle of bundleStats.children || []) {
      const name = bundle.name;
      const gzipSize = bundle.gzipSize || 0;
      const bundleSizeKB = bytesToKB(gzipSize);
      
      bundleData[name] = bundleSizeKB;
      totalBundleSize += gzipSize;
      
      // Check against budget
      if (SIZE_BUDGETS[name] && bundleSizeKB > SIZE_BUDGETS[name]) {
        violations.push({
          name,
          size: bundleSizeKB,
          budget: SIZE_BUDGETS[name],
          overage: bundleSizeKB - SIZE_BUDGETS[name]
        });
      }
    }
    
    // Convert total to KB
    const totalSizeKB = bytesToKB(totalBundleSize);
    
    // Check total size
    if (totalSizeKB > SIZE_BUDGETS.total) {
      violations.push({
        name: 'total',
        size: totalSizeKB,
        budget: SIZE_BUDGETS.total,
        overage: totalSizeKB - SIZE_BUDGETS.total
      });
    }
    
    // Print bundle size report
    console.log('\n===== Bundle Size Report =====');
    console.log('Size (gzip KB) | Budget (KB) | Bundle');
    console.log('----------------------------------');
    
    Object.entries(bundleData).forEach(([name, size]) => {
      const budget = SIZE_BUDGETS[name] || 'N/A';
      const status = SIZE_BUDGETS[name] && size > SIZE_BUDGETS[name] ? '⚠️' : '✅';
      console.log(`${size.toString().padStart(13)} | ${budget.toString().padStart(11)} | ${status} ${name}`);
    });
    
    console.log('----------------------------------');
    console.log(`${totalSizeKB.toString().padStart(13)} | ${SIZE_BUDGETS.total.toString().padStart(11)} | ${totalSizeKB > SIZE_BUDGETS.total ? '⚠️' : '✅'} total\n`);
    
    // Print violations
    if (violations.length > 0) {
      console.error('\n⚠️ Bundle size budget violations:');
      violations.forEach(v => {
        console.error(`  - ${v.name}: ${v.size}KB exceeds budget of ${v.budget}KB by ${v.overage}KB`);
      });
      
      console.error('\nPlease optimize your bundles to meet size budgets.');
      process.exit(1);
    } else {
      console.log('✅ All bundle sizes are within budget!');
    }
    
  } catch (error) {
    console.error('Error checking bundle sizes:', error);
    process.exit(1);
  }
}

main();
