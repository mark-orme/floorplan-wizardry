#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Check for missing exports and other import-related issues
echo "üîç Checking exports and imports..."
npx eslint --config ./eslint/export-validation.js $(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(ts|tsx)$')

if [ $? -ne 0 ]; then
  echo "‚ùå Export validation failed. Please fix the issues and try again."
  echo "   Common issues:"
  echo "   - Importing a name that is not exported from a module"
  echo "   - Re-exporting the same name from multiple sources"
  echo "   - Missing export declarations"
  echo "   - Circular dependencies between modules"
  exit 1
fi

echo "‚úÖ Export validation passed."

# Additional checks for module naming consistency and ambiguity
echo "üîç Checking for ambiguous exports..."
ambiguous_exports=$(find src -type f -name "*.ts" -o -name "*.tsx" | xargs grep -l "export \* from" | xargs grep -l "export {" || true)

if [ -n "$ambiguous_exports" ]; then
  echo "‚ö†Ô∏è  Warning: Potentially ambiguous exports found in:"
  echo "$ambiguous_exports"
  echo "   Consider using explicit exports to avoid naming conflicts."
  # This is just a warning, not an error that stops the commit
fi

# Check for duplicate exports across the codebase
echo "üîç Checking for duplicate export names..."
duplicate_check=$(find src -type f -name "*.ts" -o -name "*.tsx" | xargs grep -h "export const" | grep -v "from" | awk '{print $3}' | sort | uniq -d)

if [ -n "$duplicate_check" ]; then
  echo "‚ö†Ô∏è  Warning: Potential duplicate export names found:"
  echo "$duplicate_check"
  echo "   Consider using unique names or explicit imports to avoid confusion."
  # This is just a warning, not an error that stops the commit
fi

# Enhanced check for re-exports with the same name
echo "üîç Checking for re-export conflicts..."
for file in $(find src -type f -name "index.ts"); do
  export_names=$(grep -E "export \* from|export {|export const" $file | sort)
  duplicate_exports=$(echo "$export_names" | grep -o -E "[a-zA-Z0-9_]+" | sort | uniq -d)
  
  if [ -n "$duplicate_exports" ]; then
    echo "‚ö†Ô∏è  Warning: Potential export name conflicts in $file:"
    echo "$duplicate_exports"
    echo "   Consider using explicit named exports to avoid ambiguity."
  fi
done

# NEW: More robust check for wildcard exports combined with direct exports
echo "üîç Running new critical ambiguity check..."

# Check for files that have both direct exports and wildcard exports
for file in $(find src -type f -name "*.ts" -o -name "*.tsx" | xargs grep -l "export \* from" | xargs grep -l "export const"); do
  echo "‚ö†Ô∏è File with both wildcard and direct exports detected: $file"
  echo "   This pattern can lead to ambiguous exports. Consider using explicit exports only."
  echo "   Example: 'export { specificFunction } from './module'' instead of 'export * from './module''"
done

# NEW: Check specifically for exported names from imported modules
echo "üîç Checking for ambiguous re-exports..."
for file in $(find src -type f -name "index.ts"); do
  import_patterns=$(grep -E "export \* from" $file | grep -o -E "'[^']+'" | tr -d "'" | sort)
  
  if [ -n "$import_patterns" ]; then
    echo "Checking re-exports in $file:"
    
    # For each wildcard export, check if any other export could conflict
    for import_path in $import_patterns; do
      target_file=$(find src -path "*${import_path}.ts")
      
      if [ -n "$target_file" ]; then
        exports_in_target=$(grep -E "export (const|function|class|interface|type|enum)" $target_file | awk '{print $3}' | cut -d '(' -f1 | cut -d ':' -f1 | sort)
        
        if [ -n "$exports_in_target" ]; then
          echo "‚ö†Ô∏è  $file re-exports these from $import_path:"
          echo "$exports_in_target"
          
          # NEW: Check each export against direct exports in the barrel file
          for export_name in $exports_in_target; do
            if grep -q "export const $export_name" "$file" || grep -q "export function $export_name" "$file" || grep -q "export class $export_name" "$file"; then
              echo "‚õî ERROR: Ambiguous export detected! '$export_name' is both directly exported and re-exported via wildcard!"
              exit 1
            fi
          done
        fi
      fi
    done
  fi
done

# NEW: Enhanced check for ambiguous exports in barrel files
echo "üîç Running enhanced checks for ambiguous exports in barrel files..."

for barrel_file in $(find src -name "index.ts"); do
  # Get directory of barrel file
  barrel_dir=$(dirname "$barrel_file")
  
  # Find all direct exports from other files
  direct_exports=$(grep -E "export \* from" "$barrel_file" | sed -E "s/.*from '(.*)'.*/\1/")
  
  # Check each direct export for conflicts
  for export_path in $direct_exports; do
    # Find the actual file being exported
    target_file="$barrel_dir/${export_path}.ts"
    
    if [ -f "$target_file" ]; then
      # Get exports from the target file
      target_exports=$(grep -E "export (const|function|class|enum|type|interface)" "$target_file" | sed -E "s/export (const|function|class|enum|type|interface) ([a-zA-Z0-9_]+).*/\2/")
      
      # For each export in the target file
      for export_name in $target_exports; do
        # Check if the same name is directly exported in the barrel file
        if grep -q "export const $export_name" "$barrel_file" || grep -q "export function $export_name" "$barrel_file" || grep -q "export class $export_name" "$barrel_file"; then
          echo "‚õî CRITICAL: Ambiguous export detected in $barrel_file"
          echo "   '$export_name' is exported both directly and via wildcard import from $export_path"
          echo "   This will cause TypeScript errors! Please fix this before committing."
          exit 1
        fi
      done
    fi
  done
done

echo "‚úÖ No ambiguous exports detected in barrel files."

echo "‚úÖ All export checks completed."
